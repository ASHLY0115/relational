<h2>Query language</h2>

<p>This page explains the query language supported by relational.</p>

<h3>Operators</h3>

It has 2 class of operators:
<ul>
<li><a href="#noparam">Binary operators</a></li>
<li><a href="#param"  >Unary operators (with parameters)</a></li>
</ul>

<h4><a id="noparam">Binary operators</a></h4>

<p>
Operators without parameters work on two relations. The syntax for those operators is: <code>relation OPERATOR relation</code>.
</p>

<table class="inline">
    <tr class="row0">
        <th class="col0"> Symbol </th><th class="col1"> Name </th><th class="col2"> Example </th>
    </tr>
    <tr class="row1">
        <td class="col0"> * </td><td class="col1">product</td><td class="col2"> A * B </td>
    </tr>
    <tr class="row2">
        <td class="col0"> - </td><td class="col1">difference</td><td class="col2"> A - B </td>
    </tr>
    <tr class="row3">
        <td class="col0"> ∪ </td><td class="col1">union</td><td class="col2"> A ∪ B </td>
    </tr>
    <tr class="row4">
        <td class="col0"> ∩ </td><td class="col1">intersection</td><td class="col2"> A ∩ B </td>
    </tr>
    <tr class="row5">
        <td class="col0"> ÷ </td><td class="col1">division</td><td class="col2"> A ÷ B </td>
    </tr>
    <tr class="row6">
        <td class="col0"> ⋈ </td><td class="col1">join</td><td class="col2"> A ⋈ B </td>
    </tr>
    <tr class="row7">
        <td class="col0"> ⧑ </td><td class="col1">left outer join</td><td class="col2"> A ⧑ B </td>
    </tr>
    <tr class="row8">
        <td class="col0"> ⧒ </td><td class="col1">right outer join</td><td class="col2"> A ⧒ B </td>
    </tr>
    <tr class="row9">
        <td class="col0"> ⧓ </td><td class="col1">full outer join</td><td class="col2"> A ⧓ B </td>
    </tr>
</table>

<h4><a id="param">Unary operators</a></h4>

<p>
Operators with parameters work on a single relation, and the result will depend on the passed parameters. The syntax for those is: <code>OPERATOR parameters (relation)</code>
</p>

<table class="inline">
    <tr class="row0">
        <th class="col0"> Symbol </th><th class="col1"> Name </th><th class="col2"> Example </th><th class="col3"> Note </th>
    </tr>
    <tr class="row1">
        <td class="col0"> σ </td><td class="col1">selection</td><td class="col2"> σ id==index or rank&gt;3 (A) </td><td class="col3"> Expression must be written in python. The variables have the names of the fields in the relation.</td>
    </tr>
    <tr class="row2">
        <td class="col0"> π </td><td class="col1">projection</td><td class="col2"> π name,age (A) </td><td class="col3"></td>
    </tr>
    <tr class="row3">
        <td class="col0"> ρ </td><td class="col1">rename</td><td class="col2"> ρ old_name➡new_name,age➡old (A) </td><td class="col3"> </td>
    </tr>
</table>

<p>The language is formally defined <a href="grammar.html">here</a>.</p>

<h4>Complex queries</h4>
<p>In any place where a relation is expected, a query can be used instead. For example, since a*b is a relation itself, you can evaluate π f1,f2 (a*b) ∪ R</p>

<p>You can use parenthesis to change priority: a ⋈ (q ∪ d)
</p>

<h3>Examples</h3>
<p>These are some valid queries.</p>

<pre><code>
# Join people and skills
people ⋈ skills

# Select people within a certain age range
σ age > 25 and age < 50 (people)

# Selection with complicated expression requires an extra set of () around the expression
σ (name.upper().startswith('J') and age > 21) (people)

# Cartesian product of people with itself, including only name and id
ρ id➡i, name➡n (people) * π name, id (people)
</code></pre>

<p>For details on types: <a href="types.html">types in relational</a>, so it will try to use an appropriate type for the values.</p>
